#
# Configuration for otpd.
#
# Boolean options must be the keywords 'yes' or 'no' (unquoted).
# Filename args that contain whitespace must be quoted.
# Integer options must be positive integers 0 and up.
# Comments begin with '#' and go to the end of the line.
#

otpd {
    # The user to run as.  The default is not to change uid.
    #user = root

    # The syslog facility to use for logging.  The default is auth.
    #log_facility = auth

    # The debug level of the server.  All logging is done via syslog.
    # This setting controls the maximum severity that will be logged.
    # Use syslog priority levels emerg through debug, and the additional
    # levels debug1 through debug8 (useful for source code debugging).
    # The debug1 through debug8 levels are logged at syslog debug priority.
    #
    # The default is debug, with filtering to a more reasonable verbosity
    # (info or notice) expected to be done in syslog.conf.
    #log_level = debug

    # Where to listen for connections from plugins.
    # The default is "/var/run/otpd/socket".
    #plugin_rp = /var/run/otpd/socket

    # The backend to use to obtain per-user token data, file or ldap.
    # The default is file.
    #backend = file

    #file {
        # The file to use for user:card mappings.  See otppasswd(5).
        # The default is "/etc/otppasswd".
        #passwd = /etc/otppasswd

        # How the key and PIN fields are encrypted in the otppasswd file.
        #   clear: key and PIN fields are not encrypted
        #     pin: key field is encrypted with the PIN (not recommended)
        # pin-md5: key field is encrypted with the md5 of the PIN
        # <keyid>: key and PIN fields are encrypted with key <keyid>
        # The default is clear.
        #encrypt = clear

        # gsmd to use in global mode (see state section below).  No default.
        #state_server =
    #}

    #ldap {
        # The directory server/port.
        # The default host is localhost.
        # The default port is obtained using getservbyname("ldap", "tcp")
        # (which uses nsswitch to pick a source, but generally this is
        # /etc/services), falling back to a default of 389.
        #host =
        #port =

        # The user/pass to bind as.  The default is anonymous.
        #binddn =
        #bindpw =

        # Where in the DIT to find user information (with token data).
        # No default. (Eg. ou=People,dc=example,dc=com)
        #basedn =
        # The search filter. A single %u will be substituted with the username.
        # No default. (Eg. uid=%u)
        #filter =

        # Search scope (one or sub).  The default is sub.
        #scope = sub

        # TLS settings.  The default is to not use TLS.
        #tls {
            # How to configure TLS (off, on, or bind-only).
            #       off: don't use TLS
            #        on: use START TLS
            # bind-only: protect the bind operation with TLS, but not searches
            # The default is off.
            #mode = off

            # How to verify the server certificate (ignore, check, or crl).
            # ignore: don't verify server cert (NOT RECOMMENDED)
            #  check: verify the cert
            #    crl: verify the cert and check CRLs.
            #         CRLs must be in cacertdir; OCSP is not supported.
            # The default is crl.
            #verify_cert = crl

            # File containing CA certificates in PEM format.  No default.
            #cacertfile =
            # Directory containing CA certificates in PEM format.  No default.
            #cacertdir =

            # File containing a client certificate.  No default.
            #certfile =
            # File containing a client key.  No default.
            #keyfile =
        #} # tls
    #} # ldap

    # Keys used for encryption of otppasswd or LDAP data.
    # Multiple key sections are allowed.
    #passwdkey {
        # Numeric key identifier.  Start at 0.
        #id =
        # The key itself (any length).
        #key =
    #}

    # Timeout, in ms, for each request.  This includes time to look the
    # user up (really only relevant with LDAP), time to lock state
    # (really only relevant when using gsmd), validate the OTP, and then
    # to update state (again, really only relevant with gsmd).  This must
    # be less than the client (e.g. RADIUS client on a VPN server)
    # failover timeout, so that clients do not failover to other auth
    # servers while we are still doing work.  If this value is too high,
    # then in the worst case allowing clients to failover will cause a
    # spiralling load problem which will be unrecoverable.  In the best
    # case, the system will do extra work, which will be ignored by the
    # client (since it has already timed out).
    #
    # This value is not absolute; timing data is not perfectly accounted
    # for throughout the OTP authentication path, and may slip beyond the
    # configured value.  Additionally, the start time of a request, as
    # recorded by otpd, may already be well behind the actual time of the
    # initial request for many reasons, e.g. the initial request of a
    # RADIUS client to a RADIUS server may have been dropped by the
    # network, and the first packet the RADIUS server sees is actually a
    # retransmission 3s later.
    #
    # Also, due to a deficiency in the OpenLDAP library, the timeout is
    # not taken into account when setting up an SSL/TLS connection to
    # an LDAP server.  otpd reuses connections to the LDAP server, so
    # this only comes into play when an LDAP connection is not available
    # and a new one has to be established.
    #
    # The default is 11,700 ms, to account for aggressive (but typical)
    # RADIUS client settings of 3s retransmissions with 3 retries, with
    # a generous 300ms padding to absorb our own timing errors and allow
    # for retransmission with gsmd.
    #
    # Different otpd's can safely have different timeout settings.  The
    # value should be chosen based on the auth server interface to each
    # otpd.  That is, for an otpd on a RADIUS server, check the settings
    # (and consistency!) for timeouts on the RADIUS clients, but
    # generally the default 11,700ms is good.  But for an otpd that
    # authenticates ssh logins, the timeout can be much longer, slightly
    # less than the LoginGraceTime setting, 120s by default, so 118,500
    # might be good (since the timeout here is so long, we can afford to
    # include much more slop).  For an otpd that serves multiple
    # authentication servers, the timeout must be the smallest one that
    # prevents client timeout.  It may make more sense to run multiple
    # instances of otpd.
    #timeout = 11700

    # Some tokens have what we call a "hard PIN"; users enter a PIN into
    # the token to activate it.  This has the advantage that only the
    # user knows the PIN, and that it is only entered into a secure
    # device, however, it has a usability disadvantage.
    #
    # Other tokens do not have a keypad, and the user enters a "soft PIN"
    # as part of the passcode.  This has the advantage of a better UI,
    # but has the disadvantages that the PIN is susceptible to capture,
    # which can reduce the token to a single factor device; and that the
    # server admins know the PIN.  (Note that it doesn't matter for hard
    # PIN devices that admins don't know the PIN, since they know the
    # token secret; the loss incurred by admin exposure is not for security
    # of the device, but compromise of personal information.)
    #
    # For simple guessing attacks, soft PIN (especially our implementation,
    # which allows alphanumeric PINs) improves security by increasing
    # the amount of guesswork an attacker has to do.
    #
    # The prepend_pin setting toggles whether the user must prepend (yes)
    # or append (no) the soft PIN; the default is yes (prepend).  Note
    # that hard PIN devices can utilize a soft PIN as well.
    # The defalt is yes.
    #prepend_pin = yes

    # The number of consecutive failed logins before a user is locked out.
    # A locked out user must have their state reset by an adminstrator.
    # A value of 0 disables this function.
    # The default is 0.
    #hardfail = 0

    # Since hardfail isn't very useful (ANYONE can lock out ANY user),
    # we also have a softfail option.
    #
    # After <softfail> consecutive failures, the user is put into "delay
    # mode".  In this mode, a minimum delay between authentication
    # attempts is imposed, during which time all attempts fail regardless
    # of passcode correctness.  The delay starts at 1 minute and doubles,
    # up to a maximum of 32 minutes, for each additional attempt.
    #
    # Either hardfail or softfail is required to prevent a passcode
    # guessing attack; with such a small passcode space, such an attack
    # would be trivial without an imposed rate limit.
    # The default is 5.
    #softfail = 5

    # Tokens that are event synchronous can easily lose sync with the
    # server, e.g. if the user plays with the token they will increment
    # the token's event counter, leaving the server behind.  Or if they
    # simply mistype the passcode they will also be out of sync.
    #
    # So, we need to allow for the user's token to get ahead of the
    # server's state.  This value is the max number of events the server
    # will tolerate the user being ahead.  BE CAREFUL setting this value,
    # it is also the number of responses that will be accepted.  Doubling
    # this value also doubles the chance of a random guess being correct!
    #
    # For time synchronous tokens, the time window (twindow_size) is a
    # card-specific value that does not require configuration.
    #
    # The default is 5.  Before increasing this value, please read our
    # passcode guessing paper (at http://www.tri-dsystems.com/) to
    # understand the implications of setting this too high.
    #ewindow_size = 5

    # This last option, rwindow_size, is the most complicated.  It only
    # has an effect for event synchronous tokens, and is similar to
    # ewindow_size: ewindow_size sets the event lookahead for up to
    # <softfail> failed authentications, and rwindow_size sets the
    # lookahead after that point.
    #
    # What generally happens is that after <softfail> failed attempts,
    # the user is too far ahead in the event window to ever login
    # successfully.  To reduce the need to set ewindow_size to a high
    # value (because it drastically impacts vulnerability to a guessing
    # attack), the "rwindow" allows extension of the event window without
    # an increase in exposure to the guessing attack.
    #
    # As described earlier, once the user hits <softfail> consecutive
    # failures, they are placed in "delay mode".  In delay mode, the user
    # will be in a forced delay period, during which all authentication
    # attempts fail.
    #
    # If rwindow_size is non-zero, then after exceeding <softfail>
    # consecutive failures the server will increase the lookahead from
    # <ewindow_size> events to <rwindow_size> events, and the delay will
    # not be enforced, however, the user must enter TWO CONSECUTIVE sync
    # passcodes correctly.
    #
    # For example, say softfail=1, ewindow_size=2 and rwindow_size=8.
    # The server's state is such that the next 8 responses are 1 ... 8.
    # The user, however, has played with the token and the passcode
    # now displayed is '3' (the third response), which he enters.
    #
    # This is ahead of ewindow_size, so the server refuses him,
    # and places the user into delay mode, since softfail is only 1.
    # The delay is 1 minute, since this is the <softfail> failure.
    #
    # The user tries again immediately, using '3' again.  Since the user
    # is now in delay mode, the server refuses him (remember, we said he
    # tried again "immediately").  Even if the user weren't in delay mode
    # (say, softfail is larger), the server would still refuse him
    # because he is too far ahead of the normal ewindow_size window.
    #
    # But since has exceeded <softfail> failures, and rwindow_size is
    # non-zero, instead of just rejecting responses beyond ewindow_size
    # events, the server also looks ahead up to rwindow_size (8 in this
    # case) events.  It sees that '3' is within rwindow_size events,
    # records that the user gave a correct sync response at position 3,
    # returns failure, and increases the delay period to 2 minutes.  The
    # user isn't given any indication that something special happened.
    #
    # Now the user tries again immediately, this time using the next
    # response of '4'.  Without rwindow, this would be refused since
    # the user is in delay mode.  But because rwindow_size is set,
    # the server sees that '4' is within the rwindow_size window,
    # and that the user's previous response ('3') matches the previous
    # response in the window, so the user is authenticated, resynced,
    # and returned to normal (non-delay non-rwindow) mode.
    #
    # It is recommended to instruct users to /always/ advance to the
    # next passcode on error, and that they should always try at least
    # 3 (or 4) consecutive entries before calling the helpdesk.  If the
    # user in our example had advanced to the next passcode immediately
    # (rather than re-using '3'), he would have succeeded one attempt
    # earlier.
    #
    # One purpose of the rwindow, as shown, is to allow users to resync
    # their token when they get too far ahead of the normal ewindow,
    # without having to go through a challenge/response authentication.
    # (Which is how it was named: the 'r' in rwindow is for 'resync'.)
    # That increases user acceptance of the token, and reduces helpdesk
    # costs associated with token resync.  Another nice point is that
    # users don't normally know that they are out of sync, and with
    # rwindow they just do what they would normally do ("try again").
    #
    # A second purpose of the rwindow is to allow users with many recent
    # consecutive failures (for many possible reasons), to login without
    # having to wait for expiration of the delay period.
    #
    # To repeat from many paragraphs above, rwindow_size only has a
    # meaning for event synchronous tokens.
    #
    # The default is 25.  Setting this to a large value is safe,
    # security-wise, but increases the load on the server.  It is
    # better to use per-user rwindow's with LDAP, or to use the
    # included 'resynctool' program as needed.  A value of 0 disables
    # this feature.
    #rwindow_size = 25

    #state {
        # Local or global (gsmd) mode.  The default is local.
        #mode = local

        # When running in local mode, the directory where state data
        # can be found.
        # The default is "/etc/otpstate".
        #statedir = /etc/otpstate

        # The default server (gsmd) port to use.  The default is obtained
        # using getservbyname("gsmd", "udp") (which uses nsswitch to pick
        # a source, but generally this is /etc/services), falling back to
        # a default of 1220.
        #port = 1220

        # Server sub-sections define each gsmd when run in global mode.
        #server {
            # You must specify a nickname for this server.
            # LDAP entries refer to this nickname.
            #name = localhost
            # Primary hostname or IP is required.
            #primary = 127.0.0.1
            # Backup hostname or IP is optional.
            #backup = 127.0.0.2
            # You must specify a 256-bit key.
            #key = 0000000000000000000000000000000000000000000000000000000000000000
            # Server-specific gsmd port, overriding default in parent section.
            #gsmd_port = 1220
        #}
    #} # state
}
