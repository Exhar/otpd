.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "otppasswd 5"
.TH otppasswd 5 "2008-02-11" "otpd 3.2.4" " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
otppasswd \- secrets file for otpd
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fI/etc/otppasswd\fR file contains the secrets used to authenticate users
that hold One-Time Password (\s-1OTP\s0) tokens.  Each entry is a single line 
with colon-delimited fields of the form:
.PP
.Vb 1
\&  username:tokenid:key[:pin]
.Ve
.PP
The \f(CW\*(C`pin\*(C'\fR field is optional.
.PP
The \f(CW\*(C`key\*(C'\fR and \f(CW\*(C`pin\*(C'\fR fields may be encrypted; see otp.conf for a
description of valid encryption modes and key specification.
.SH "VALID CHARACTERS"
.IX Header "VALID CHARACTERS"
In addition to the restrictions noted below, the \f(CW\*(C`:\*(C'\fR (colon) and
\&\f(CW\*(C` \*(C'\fR (space) characters are not valid for any field.
.Sh "username"
.IX Subsection "username"
\&\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`~\*(C'\fR are invalid characters.
\&\f(CW\*(C`!\*(C'\fR (bang) by itself (as a single character username) is also invalid.
All other printing characters are valid.
.Sh "tokenid"
.IX Subsection "tokenid"
All printing characters are valid for the \f(CW\*(C`tokenid\*(C'\fR field.
.Sh "key"
.IX Subsection "key"
Only hex digits are valid for the \f(CW\*(C`key\*(C'\fR field: [0\-9a\-fA\-F].
The key field can be up to 256 octets (512 hex digits) long, however
the valid size is determined by the type of token.
.Sh "pin"
.IX Subsection "pin"
Only hex digits are valid for the \f(CW\*(C`pin\*(C'\fR field: [0\-9a\-fA\-F].
The \f(CW\*(C`pin\*(C'\fR field should consist of the hex value for an \s-1ASCII\s0 \s-1PIN\s0.
PINs can be up to 16 characters (32 hex digits) long.  Note that
since the \s-1PIN\s0 is represented as hex, the \f(CW\*(C`:\*(C'\fR (colon) and \f(CW\*(C` \*(C'\fR (space)
restriction noted earlier does not apply.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The entry
.PP
.Vb 1
\&  bob:trid\-hard\-hotp\-d6\-e8:000102030405060708090A0B0C0D0E0F10111213:3132333435
.Ve
.PP
defines the user \f(CW\*(C`bob\*(C'\fR, who holds a \f(CW\*(C`trid\-hard\-hotp\-d6\-e8\*(C'\fR token, with key
\&\f(CW00...13\fR, and \s-1PIN\s0 \f(CW12345\fR.  (Somebody change the combination on my
luggage.)
.SH "TOKEN IDS"
.IX Header "TOKEN IDS"
Token support for \fIotpd\fR\|(8) is provided by plug-in \fBcardops modules\fR.
This section describes the token ids supported by modules that are
included with \fIotpd\fR\|(8).
.Sh "cryptocard"
.IX Subsection "cryptocard"
The \f(CW\*(C`cryptocard\*(C'\fR module supports tokens made by CRYPTOCard.  These tokens
are event synchronous and use the X9.9 algorithm.
.IP "cryptocard\-\fIdisplay\fR\-\fImode\fR" 4
.IX Item "cryptocard-display-mode"
\&\fIdisplay\fR specifies both the representation (\f(CW\*(C`h\*(C'\fR for hex or \f(CW\*(C`d\*(C'\fR
for decimal) and the number of digits (7, 8, or \f(CW\*(C`p\*(C'\fR for phone).
Phone mode is the same as 7\-digit mode, except that the user is
expected to actually enter the \f(CW\*(C`\-\*(C'\fR (dash) shown on the token
display in 7\-digit mode.  For example, \f(CW\*(C`h8\*(C'\fR describes an 8\-digit
hex display, and \f(CW\*(C`dp\*(C'\fR describes a 7\-digit decimal display using
phone mode.
.Sp
\&\fImode\fR specifies the token's sync mode settings; \f(CW\*(C`rc\*(C'\fR for
\&\*(L"random challenge\*(R" or async-only mode, \f(CW\*(C`es\*(C'\fR for \*(L"event sync\*(R"
or sync-only mode, and \f(CW\*(C`rs\*(C'\fR for \*(L"random sync\*(R" or either mode.
.Sp
For example, \f(CW\*(C`cryptocard\-d7\-es\*(C'\fR.
.Sh "hotp"
.IX Subsection "hotp"
The \f(CW\*(C`hotp\*(C'\fR module supports a generic event synchronous \s-1HOTP\s0 token,
using a 160\-bit key and varying response lengths.
.IP "hotp-d\fIdigits\fR" 4
.IX Item "hotp-ddigits"
\&\fIdigits\fR is the number of \s-1OTP\s0 digits (6\-9).  For example, hotp\-d6.
.Sh "x99"
.IX Subsection "x99"
The \f(CW\*(C`x99\*(C'\fR module supports a generic asynchronous X9.9 token,
with 7 or 8 digit hex or decimal response.
.IP "x99\-\fIdisplay\fR" 4
.IX Item "x99-display"
\&\fIdisplay\fR specifies both the representation (\f(CW\*(C`h\*(C'\fR for hex or \f(CW\*(C`d\*(C'\fR
for decimal) and the number of digits (7 or 8).  For example,
\&\f(CW\*(C`x99\-d7\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIotpd\fR\|(8), \fIresynctool\fR\|(8), \s-1README\s0
.SH "URL"
.IX Header "URL"
<http://otpd.googlecode.com/>
